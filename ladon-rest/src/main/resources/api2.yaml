openapi: 3.0.1
info:
  title: Ladon HTTP API
  description: 'Some example requests using plain HTTP. For more information have a look at [https://ladon.org](https://ladon.org)'
  contact:
    email: team@mind-consulting.de
  version: 2.2.1
externalDocs:
  description: Find out more about Ladon
  url: http://ladon.org
servers:
  - url: https://localhost:8080/services/rest
tags:
  - name: documents
    description: get, save and delete documents
  - name: buckets
    description: add and delete buckets
paths:
  /{bucket}:
  parameters:
    - name: bucket
      in: path
      description: name of the new bucket
      required: true
      schema:
        type: string

  put:
    tags:
      - buckets
    summary: create a new bucket
    operationId: createBucket
    responses:
      200:
        description: ok
  delete:
    tags:
      - buckets
    summary: delete an existing bucket
    operationId: deleteBucket
    responses:
      201:
        description: Done
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
